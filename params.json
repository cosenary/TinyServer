{"name":"TinyServer","tagline":"A lightweight HTTP server written in Java.  ","body":"# TinyServer\r\n\r\nTinyServer is a lightweight HTTP server written in Java.  \r\nYour feedback is always welcome.\r\n\r\n#### Features:\r\n\r\n- Multithreaded\r\n- GET paramters\r\n- POST requests\r\n- RESTful routes\r\n- Callback methods\r\n- Fileserver capability\r\n- File, JSON, HTML response classes (easy to write your own)\r\n- High performance\r\n\r\nTinyServer is perfect for embedding into your applications.\r\n\r\n## Requirements ##\r\n\r\n- Java 7+\r\n- Response class dependencies *[optional]*  \r\n\r\n## Quick Start ##\r\n\r\nFirst import the server library: `import net.metzweb.tinyserver.*;`  \r\nNow you are good to go and can setup the server:\r\n\r\n```java\r\n// init server at port 8200\r\nTinyServer server = new TinyServer(8200);\r\n\r\n// define a GET route\r\nserver.get(\"/\", new Response() {\r\n  @Override\r\n  public void callback(Request request) {\r\n    request.write(\"Hello world :)\");\r\n  }\r\n});\r\n\r\n// start server\r\nserver.start();\r\n```\r\n\r\nand make your first request: `http://localhost:8200`  \r\nIf everything works well, you will get a friendly welcome response:\r\n\r\n```\r\nHello world :)\r\n```\r\n\r\n> For a working example, take a look into the `/example` folder.\r\n\r\n## Details\r\n\r\n### Server\r\n\r\nInitialize the server by calling: `new TinyServer(<port>)`\r\n\r\nAfter you have defined all routes, simply call `start()` to start the server and receive requests.\r\n\r\n### Request routes\r\n\r\n#### GET\r\n\r\n`get(<route>, <callback>)`\r\n\r\n#### POST\r\n\r\n`post(<route>, <callback>)`\r\n\r\n#### Route patterns\r\n\r\nBefore you define your request routes, please take a look at the following guidlines:\r\n\r\n1. all routes have to start with a **backslash**: `/hello/world`\r\n    - the default route is simply: `/`\r\n2. request parameters are **not allowed** in your **route path**: ~~`/hello?foo=bar`~~\r\n\t- access the params instead in the [callback method](#callback).\r\n3. *\"fake\"* file **extensions** allowed: `/hello.json`\r\n\t- useful, if you associate it with the according [response format](#response).\r\n\r\n### Request parameters\r\n\r\n#### GET parameter\r\n\r\nIf your request contains request parameters, they will be accessible in your callback method.\r\n\r\nTo receive a particular parameter, pass its key into the \r\n`param(<key>)` method. If the key doesn't exists it will return `null`.\r\n\r\nExample usage: `/hello?name=Christian`\r\n\r\n```java\r\npublic void callback(Request request) {\r\n  request.write(\"Howdy \" + request.param(\"name\"));\r\n}\r\n```\r\n\r\n#### Route parameter *(RESTful)*\r\n\r\nIn order to receive route parameters, mark these with placeholders: `[parameter]`\r\n\r\n`get(\"/hello/[name]/[age]\", <callback>)`\r\n\r\nThese values are accessible in your callback method, the same way as one accesses GET params:  \r\n`request.param(<parameter>)`\r\n\r\n#### POST data\r\n\r\nRetrieve posted data, by using the `getData()` method in your callback method.  \r\nThis returns the POST data as a `String` (including linebreaks).\r\n\r\n### Callback\r\n\r\n##### Anonymous class\r\n\r\nAn anonymous class can be directly passed into the route method:\r\n\r\n```java\r\nserver.get(\"/\", new Response() {\r\n  @Override\r\n  public void callback(Request request) {\r\n    // ...\r\n  }\r\n});\r\n```\r\n\r\n##### Standalone class\r\n\r\nA callback class has to implement the `Response` interface:\r\n\r\n```java\r\nclass MyCallback implements Response {\r\n  @Override\r\n  public void callback(Request request) {\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\nand then be passed into the route method:\r\n\r\n```java\r\nserver.get(\"/\", new MyCallback());\r\n```\r\n\r\n### Response\r\n\r\nBy default, TinyServer sends `text/plain` responses.  \r\nIn order to use a formatted response, it's necessary to set the response class accordingly:\r\n\r\n```java\r\nserver.setResponseFormat(<format object>);\r\n```\r\n\r\nEvery response class comes with four methods:\r\n\r\n- 200 Success: `success(<data>)`\r\n- 403 Forbidden: `forbidden()`\r\n- 404 Not found: `notFound()`\r\n- 500 Server Error: `error()`\r\n\r\nThese methods are accessible by calling the `write()` method in your callback method:\r\n\r\n```java\r\nrequest.write().success(\"Hello world.\");\r\n```\r\n\r\n**Shortcut:** Alternatively, you can pass your data directly into the `write()` method, which is an alias for the `success()` method:\r\n\r\n```java\r\nrequest.write(\"Hello world.\");\r\n```\r\n\r\n#### File\r\n\r\nTo serve a file, simply pass its path into the `success(String filePath)` method.\r\n\r\nExample usage:\r\n\r\n```java\r\nserver.setResponseFormat(new FileResponse());\r\nserver.get(\"/kitten\", new Response() {\r\n  @Override\r\n  public void callback(Request request) {\r\n    request.write(\"kitten.jpg\");\r\n  }\r\n});\r\n```\r\n\r\nServer response:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: private, max-age=0\r\nContent-Type: image/jpeg\r\nServer: TinyServer\r\n\r\n<kitten.jpg>\r\n```\r\n\r\n#### HTML\r\n\r\nThe `success(String htmlContent)` method accepts an HTML `String`.\r\n\r\nExample usage:\r\n\r\n```java\r\nserver.setResponseFormat(new HtmlResponse());\r\nserver.get(\"/halloween\", new Response() {\r\n  @Override\r\n  public void callback(Request request) {\r\n    String output = \"<!DOCTYPE html>\"\r\n\t  + \"<html>\"\r\n\t  + \"  <head><title>31 October</title></head>\"\r\n\t  + \"  <body><h2>Happy Halloween!</h2></body>\"\r\n\t  + \"</html>\";\r\n\trequest.write(output);\r\n  }\r\n});\r\n```\r\n\r\nServer response:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: private, max-age=0\r\nContent-Type: text/html; charset=utf-8\r\nServer: TinyServer\r\n\r\n<!DOCTYPE html>\r\n<html>\r\n  <head><title>31 October</title></head>\"\r\n  <body><h2>Happy Halloween!</h2></body>\"\r\n</html>\r\n```\r\n\r\n#### JSON\r\n\r\n---\r\n\r\n**Please note:** This requires the [JSON simple](http://code.google.com/p/json-simple/) Java library.\r\n\r\n---\r\n\r\nThe `success()` method requires a `Map` object, that holds the `key => value` pairs.\r\n\r\nExample usage:\r\n\r\n```java\r\nserver.setResponseFormat(new JsonResponse());\r\nserver.get(\"/weather\", new Response() {\r\n  @Override\r\n  public void callback(Request request) {\r\n    HashMap<String, String> map = new HashMap<>();\r\n    map.put(\"location\", \"Munich\");\r\n    map.put(\"condition\", \"fair\");\r\n    map.put(\"temperature\", \"32 °C\");\r\n    request.write(map);\r\n  }\r\n});\r\n```\r\n\r\nResponse:\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nCache-Control: no-cache, must-revalidate\r\nContent-Type: application/json; charset=utf-8\r\nServer: TinyServer\r\n\r\n{\r\n  \"status\": \"200\",\r\n  \"message\": \"OK\",\r\n  \"data\": {\r\n    \"condition\": \"fair\",\r\n    \"location\": \"Munich\",\r\n    \"temprature\": \"32 °C\"\r\n  }\r\n}\r\n```\r\n\r\n#### Other formats\r\n\r\nIt's simple to create your own response class for a missing format.  \r\nYou can find a response class template in the example folder.\r\n\r\n---\r\n\r\nEvery response class **must extend the abstract `ResponseFormat`** class  \r\nand its constructor must call `super(<MIME type>)`.\r\n\r\n---\r\n\r\n#### Response classes\r\n\r\n- `File` [response class](#)\r\n- `HTML` [response class](#)\r\n- `JSON` [response class](#)\r\n  - requires [JSON simple](http://code.google.com/p/json-simple/)\r\n\r\n> Let me know if you have created a new response class, so it can be add it to the list.\r\n\r\n## Misc\r\n\r\nPOST routes can be tested with cURL via the terminal:\r\n\r\n```shell\r\ncurl -X POST -d 'hello world' localhost:8200/data --header \"Content-Type:text/plain\"\r\ncurl -X POST -d @hello.txt localhost:8200/file --header \"Content-Type:text/plain\"\r\n```\r\n\r\n## Config\r\n\r\n- Server port: `new TinyServer(<port>)`\r\n\r\n## Issues\r\n\r\nPlease submit issues through the [issue tracker](https://github.com/cosenary/TinyServer/issues) on GitHub.\r\n\r\n## History\r\n\r\n**TinyServer 1.0 - 13/07/2013**\r\n\r\n- `release` First official version\r\n- `update` Major code improvements\r\n- `update` DRY code guidelines\r\n- `update` Rewritten documentation\r\n- `feature` RESTful route parameters\r\n- `feature` anonymous callbacks\r\n- `feature` JSON response class\r\n- `feature` Java 7 improvements\r\n- `feature` POST request support\r\n- `feature` File response class\r\n\r\n**Server 0.8 - 28/10/2012**\r\n\r\n- `release` Internal testing version\r\n- `feature` Multithreading\r\n- `update` Better documentation\r\n\r\n**Server 0.5 - 24/10/2012**\r\n\r\n- `release` First internal alpha version\r\n\r\n## Credits\r\n\r\nCopyright (c) 2013 - Programmed by Christian Metz  \r\nReleased under the [BSD License](http://www.opensource.org/licenses/bsd-license.php).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}